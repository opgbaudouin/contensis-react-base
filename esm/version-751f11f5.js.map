{"version":3,"file":"version-751f11f5.js","sources":["../src/redux/types/navigation.js","../src/redux/reducers/navigation.ts","../src/routing/redux/reducers.ts","../src/redux/types/version.js","../src/redux/reducers/version.ts","../src/redux/store/routerMiddleware.js","../src/redux/store/store.ts","../src/redux/selectors/navigation.js","../src/redux/store/injectors.js","../src/redux/actions/version.js"],"sourcesContent":["const ACTION_PREFIX = '@NAVIGATION/';\nexport const GET_NODE_TREE = `${ACTION_PREFIX}_GET_NODE_TREE`;\nexport const SET_NODE_TREE = `${ACTION_PREFIX}_SET_NODE_TREE`;\nexport const GET_NODE_TREE_ERROR = `${ACTION_PREFIX}_GET_NODE_TREE_ERROR`;\n","import { Draft, produce } from 'immer';\nimport { SET_NODE_TREE, GET_NODE_TREE_ERROR } from '~/redux/types/navigation';\n\nconst initialState = {\n  root: null,\n  treeDepends: [],\n  isError: false,\n  isReady: false,\n};\n\nexport default produce((state: Draft<any>, action) => {\n  switch (action.type) {\n    case SET_NODE_TREE: {\n      state.root = action.nodes;\n      state.isReady = true;\n      return;\n    }\n    case GET_NODE_TREE_ERROR: {\n      state.isError = true;\n      return;\n    }\n    default:\n      return;\n  }\n}, initialState);\n","import { Draft, produce } from 'immer';\n\nimport {\n  SET_ENTRY,\n  SET_NAVIGATION_PATH,\n  SET_ANCESTORS,\n  SET_TARGET_PROJECT,\n  SET_ROUTE,\n  SET_SIBLINGS,\n  SET_SURROGATE_KEYS,\n  UPDATE_LOADING_STATE,\n} from './types';\n\nconst initialState = {\n  currentHostname: null,\n  contentTypeId: null,\n  currentPath: '/',\n  currentNode: {},\n  currentNodeAncestors: [],\n  currentProject: 'unknown',\n  entryID: null,\n  entry: null,\n  currentTreeId: null,\n  entryDepends: [],\n  error: undefined,\n  isError: false,\n  isLoading: false,\n  location: {},\n  mappedEntry: null,\n  nodeDepends: [],\n  notFound: false,\n  staticRoute: null,\n  statusCode: 200,\n};\n\nexport default produce((state: Draft<any>, action) => {\n  switch (action.type) {\n    case SET_ANCESTORS: {\n      state.currentNodeAncestors = action.ancestors;\n      return;\n    }\n    case SET_ENTRY: {\n      const {\n        entry,\n        error,\n        mappedEntry,\n        node = {},\n        isError = false,\n        isLoading = false,\n        notFound = false,\n        statusCode,\n      } = action;\n\n      let defaultStatus = 200;\n      if (notFound === true && isError === false) defaultStatus = 404;\n      else if (isError === true) defaultStatus = statusCode || 500;\n\n      if (!entry) {\n        state.entryID = null;\n        state.entry = null;\n        state.error = error;\n        state.mappedEntry = null;\n        state.isError = isError;\n        state.isLoading = isLoading;\n        state.notFound = notFound;\n        state.statusCode = statusCode || defaultStatus;\n      } else {\n        state.entryID = action.id;\n        state.entry = entry;\n        state.error = error;\n        state.isError = isError;\n        state.isLoading = isLoading;\n        state.notFound = notFound;\n        state.statusCode = statusCode || defaultStatus;\n\n        if (mappedEntry && Object.keys(mappedEntry).length > 0) {\n          state.mappedEntry = mappedEntry;\n          state.entry = { sys: entry.sys };\n        }\n      }\n\n      if (!node) {\n        state.nodeDepends = null;\n        state.currentNode = null;\n      } else {\n        // On Set Node, we reset all dependants.\n        state.currentNode = node;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { entry, ...nodeWithoutEntry } = node; // We have the entry stored elsewhere, so lets not keep it twice.\n        state.currentNode = nodeWithoutEntry;\n      }\n      return;\n    }\n    case UPDATE_LOADING_STATE: {\n      state.isLoading = action.isLoading;\n      return;\n    }\n    case SET_NAVIGATION_PATH: {\n      let staticRoute = {} as any;\n      if (action.staticRoute) {\n        staticRoute = { ...action.staticRoute };\n      }\n      if (action.path) {\n        // Don't run a path update on initial load as we allready should have it in redux\n        const entryUri = state?.entry?.sys?.uri;\n        if (entryUri !== action.path) {\n          state.currentPath = action.path;\n          state.location = action.location;\n          state.staticRoute = {\n            ...staticRoute,\n            route: { ...staticRoute.route, component: null },\n          };\n\n          state.isLoading = typeof window !== 'undefined';\n        } else {\n          state.location = action.location;\n          state.staticRoute = {\n            ...staticRoute,\n            route: { ...staticRoute.route, component: null },\n          };\n        }\n      }\n      return;\n    }\n    case SET_ROUTE: {\n      state.nextPath = action.path;\n      return;\n    }\n    case SET_SIBLINGS: {\n      // Can be null in some cases like the homepage.\n      let currentNodeSiblingParent = null;\n      let siblingIDs = [];\n      if (action.siblings && action.siblings.length > 0) {\n        currentNodeSiblingParent = action.siblings[0].parentId;\n        siblingIDs = action.siblings.map(node => node.id);\n      }\n      const currentNodeDepends = state.nodeDepends;\n      const allNodeDepends = [\n        ...new Set([...new Set(siblingIDs), currentNodeDepends]),\n      ];\n      state.nodeDepends = allNodeDepends;\n      state.currentNodeSiblings = action.siblings;\n      state.currentNodeSiblingsParent = currentNodeSiblingParent;\n      return;\n    }\n    case SET_SURROGATE_KEYS: {\n      state.surrogateKeys = action.keys;\n      return;\n    }\n    case SET_TARGET_PROJECT: {\n      state.currentProject = action.project;\n      state.currentTreeId = ''; // getTreeID(action.project))\n      state.allowedGroups = action.allowedGroups;\n      state.currentHostname = action.hostname;\n      return;\n    }\n    default:\n      return state;\n  }\n}, initialState);\n","const VERSION_PREFIX = '@VERSION/';\nexport const SET_VERSION = `${VERSION_PREFIX}SET_VERSION`;\nexport const SET_VERSION_STATUS = `${VERSION_PREFIX}SET_VERSION_STATUS`;\n","import { Draft, produce } from 'immer';\nimport { SET_VERSION, SET_VERSION_STATUS } from '~/redux/types/version';\n\nconst initialState = {\n  commitRef: null,\n  buildNo: null,\n  contensisVersionStatus: 'published',\n};\n\nexport default produce((state: Draft<any>, action) => {\n  switch (action.type) {\n    case SET_VERSION_STATUS: {\n      state.contensisVersionStatus = action.status;\n      return;\n    }\n    case SET_VERSION: {\n      state.commitRef = action.commitRef;\n      state.buildNo = action.buildNo;\n      return;\n    }\n    default:\n      return;\n  }\n}, initialState);\n","/**\n * This middleware captures 'CALL_HISTORY_METHOD' actions to redirect to the\n * provided history object. This will prevent these actions from reaching your\n * reducer or any middleware that comes after this one.\n */\n/* eslint-disable no-unused-vars */\nconst routerMiddleware = history => store => next => action => {\n  if (action.type !== 'CALL_HISTORY_METHOD') {\n    return next(action);\n  }\n\n  const {\n    payload: { method, args },\n  } = action;\n  history[method](...args);\n};\n\nexport default routerMiddleware;\n","import {\n  applyMiddleware,\n  combineReducers,\n  compose,\n  createStore,\n  Action,\n  Store,\n  StoreEnhancer,\n} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport { createInjectorsEnhancer } from 'redux-injectors';\n\n// Core reducers\nimport NavigationReducer from '../reducers/navigation';\nimport RoutingReducer from '~/routing/redux/reducers';\nimport UserReducer from '~/user/redux/reducers';\nimport VersionReducer from '../reducers/version';\nimport routerMiddleware from './routerMiddleware';\nimport { AppState } from '../appstate';\nimport { History, MemoryHistory } from 'history';\nimport { StateType } from '~/config';\n\nexport let reduxStore;\n\n/* eslint-disable no-underscore-dangle */\ndeclare let window: Window &\n  typeof globalThis & {\n    __REDUX_DEVTOOLS_EXTENSION__: any;\n  };\n\nexport default async (\n  featureReducers: any,\n  initialState: AppState,\n  history: History | MemoryHistory,\n  stateType: StateType\n) => {\n  let reduxDevToolsMiddleware = f => f;\n\n  if (typeof window != 'undefined') {\n    reduxDevToolsMiddleware = window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : f => f;\n  }\n\n  const sagaMiddleware = createSagaMiddleware();\n\n  const reducers = {\n    navigation: NavigationReducer,\n    routing: RoutingReducer,\n    user: UserReducer,\n    version: VersionReducer,\n    ...featureReducers,\n  };\n\n  // Reassign the combiner and fromJS functions when\n  // stateType is 'immutable' with dynamic imports\n  let combiner = combineReducers;\n  let fromJS: any = (obj: any) => obj;\n  globalThis.STATE_TYPE = stateType;\n\n  if (stateType === 'immutable') {\n    globalThis.immutable = await import(\n      /* webpackChunkName: \"immutable\" */ 'immutable'\n    );\n\n    fromJS = (\n      await import(/* webpackChunkName: \"from-js\" */ '~/util/fromJSLeaveImmer')\n    ).default;\n\n    combiner = (\n      await import(/* webpackChunkName: \"redux-immutable\" */ 'redux-immutable')\n    ).combineReducers;\n  }\n\n  const createReducer = (injectedReducers = {}) => {\n    const rootReducer = combiner<AppState>({\n      ...injectedReducers,\n      // other non-injected reducers go here\n      ...reducers,\n    });\n\n    return rootReducer;\n  };\n\n  const store = (initialState: AppState) => {\n    const runSaga = sagaMiddleware.run;\n\n    const middleware: StoreEnhancer<\n      {\n        dispatch: unknown;\n      },\n      unknown\n    > = compose(\n      applyMiddleware(\n        thunkMiddleware,\n        sagaMiddleware,\n        routerMiddleware(history)\n      ),\n      createInjectorsEnhancer({\n        createReducer,\n        runSaga,\n      }),\n      reduxDevToolsMiddleware\n    );\n\n    const store: Store<AppState, Action<any>> & {\n      runSaga?: typeof runSaga;\n      close?: () => void;\n    } = createStore<AppState, Action<any>, unknown, unknown>(\n      createReducer(),\n      initialState,\n      middleware\n    );\n\n    store.runSaga = runSaga;\n    store.close = () => store.dispatch(END);\n\n    return store;\n  };\n\n  reduxStore = store(fromJS(initialState));\n  return reduxStore;\n};\n","import { getImmutableOrJS as getIn } from '~/redux/util';\n\nexport const hasNavigationTree = state =>\n  getIn(state, ['navigation', 'isReady']);\n\nexport const selectNavigationRoot = state =>\n  getIn(state, ['navigation', 'root']);\n\nexport const selectNavigationDepends = state =>\n  getIn(state, ['navigation', 'treeDepends']);\n","import { all } from 'redux-saga/effects';\nimport { reduxStore as DefaultStore } from './store';\n\nexport const convertSagaArray = sagas => {\n  if (Array.isArray(sagas))\n    return function* rootSaga() {\n      yield all(sagas);\n    };\n  return sagas;\n};\n\nexport const injectReducer = ({ key, reducer }, store = DefaultStore) => {\n  if (\n    Reflect.has(store.injectedReducers, key) &&\n    store.injectedReducers[key] === reducer\n  )\n    return;\n  store.injectedReducers[key] = reducer;\n\n  store.replaceReducer(store.createReducer(store.injectedReducers));\n};\n\nexport const injectSaga = ({ key, saga }, store = DefaultStore) => {\n  const rootSaga = convertSagaArray(saga);\n  let hasSaga = Reflect.has(store.injectedSagas, key);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const oldDescriptor = store.injectedSagas[key]; // enable hot reloading of daemon and once-till-unmount sagas\n\n    if (hasSaga && oldDescriptor.saga !== rootSaga) {\n      oldDescriptor.task.cancel();\n      hasSaga = false;\n    }\n  }\n  console.info('injectSaga, key: ', key, 'hasSaga: ', hasSaga);\n\n  if (!hasSaga) {\n    store.injectedSagas[key] = {\n      key,\n      saga: rootSaga,\n      task: store.runSaga(rootSaga),\n    };\n  }\n};\n\nexport const injectRedux = ({ key, reducer, saga }, store = DefaultStore) => {\n  console.info('injectRedux, key: ', key);\n  if (reducer) injectReducer({ key, reducer }, store);\n  if (saga) injectSaga({ key, saga }, store);\n};\n\nexport const useInjectRedux = injectRedux;\n","import { action } from '../util';\nimport { SET_VERSION, SET_VERSION_STATUS } from '../types/version';\n\nexport const setVersion = (commitRef, buildNo) =>\n  action(SET_VERSION, { commitRef, buildNo });\n\nexport const setVersionStatus = status =>\n  action(SET_VERSION_STATUS, { status });\n"],"names":["ACTION_PREFIX","GET_NODE_TREE","SET_NODE_TREE","GET_NODE_TREE_ERROR","initialState","root","treeDepends","isError","isReady","produce","state","action","type","nodes","currentHostname","contentTypeId","currentPath","currentNode","currentNodeAncestors","currentProject","entryID","entry","currentTreeId","entryDepends","error","undefined","isLoading","location","mappedEntry","nodeDepends","notFound","staticRoute","statusCode","SET_ANCESTORS","ancestors","SET_ENTRY","node","defaultStatus","id","Object","keys","length","sys","nodeWithoutEntry","UPDATE_LOADING_STATE","SET_NAVIGATION_PATH","path","entryUri","uri","route","component","window","SET_ROUTE","nextPath","SET_SIBLINGS","currentNodeSiblingParent","siblingIDs","siblings","parentId","map","currentNodeDepends","allNodeDepends","Set","currentNodeSiblings","currentNodeSiblingsParent","SET_SURROGATE_KEYS","surrogateKeys","SET_TARGET_PROJECT","project","allowedGroups","hostname","VERSION_PREFIX","SET_VERSION","SET_VERSION_STATUS","commitRef","buildNo","contensisVersionStatus","status","routerMiddleware","history","store","next","payload","method","args","reduxStore","featureReducers","stateType","reduxDevToolsMiddleware","f","__REDUX_DEVTOOLS_EXTENSION__","sagaMiddleware","createSagaMiddleware","reducers","navigation","NavigationReducer","routing","RoutingReducer","user","UserReducer","version","VersionReducer","combiner","combineReducers","fromJS","obj","globalThis","STATE_TYPE","immutable","default","createReducer","injectedReducers","rootReducer","runSaga","run","middleware","compose","applyMiddleware","thunkMiddleware","createInjectorsEnhancer","createStore","close","dispatch","END","hasNavigationTree","getIn","selectNavigationRoot","selectNavigationDepends","convertSagaArray","sagas","Array","isArray","rootSaga","all","injectReducer","key","reducer","DefaultStore","Reflect","has","replaceReducer","injectSaga","saga","hasSaga","injectedSagas","process","env","NODE_ENV","oldDescriptor","task","cancel","console","info","injectRedux","useInjectRedux","setVersion","setVersionStatus"],"mappings":"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"}